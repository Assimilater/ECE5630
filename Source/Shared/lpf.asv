[x, Fs] = audioread('ghostbustersray.wav');
fid = fopen('ghostbustersray.bin', 'wb');
fwrite(fid, x, 'float');
fclose(fid);

%LPF_DESIGN Returns a discrete-time filter object.
% MATLAB Code
% Generated by MATLAB(R) 9.3 and Signal Processing Toolbox 7.5.
% Generated on: 14-Nov-2017 16:24:06
% Equiripple Lowpass filter designed using the FIRPM function.
% All frequency values are normalized to 1.
N     = 251;   % Order
Fpass = 0.31;  % Passband Frequency
Fstop = 0.35;  % Stopband Frequency
Wpass = 1;     % Passband Weight
Wstop = 1;     % Stopband Weight
dens  = 20;    % Density Factor

% Calculate the coefficients using the FIRPM function.
b  = firpm(N, [0 Fpass Fstop 1], [1 1 0 0], [Wpass Wstop], {dens});
lpf = dfilt.dffir(b);
lpf = lpf .* 3;

fid = fopen('lpf_scaled.bin', 'wb');
fwrite(fid, size(lpf, 2), 'int');
fwrite(fid, lpf, 'float');
fclose(fid);

fid = fopen('digInterp.bin');
ydig = fread(fid, 'float');
fclose(fid);

fid = fopen('polInterp.bin');
ypol = fread(fid, 'float');
fclose(fid);

newFs = round(Fs * 3 / 2);
audiowrite('digInterp.wav', ydig, newFs);
audiowrite('polInterp.wav', ypol, newFs);

n = [0:99999];
c16 = cos((2*pi/16).*n);
c8 = cos((2*pi/8).*n);
c4 = cos((2*pi/4).*n);

fid = fopen('c16.bin', 'wb');
fwrite(fid, size(c16, 2), 'int');
fwrite(fid, c16, 'float');
fclose(fid);

fid = fopen('c8.bin', 'wb');
fwrite(fid, size(c8, 2), 'int');
fwrite(fid, c8, 'float');
fclose(fid);

fid = fopen('c4.bin', 'wb');
fwrite(fid, size(c4, 2), 'int');
fwrite(fid, c4, 'float');
fclose(fid);

fid = fopen('polc16.bin');
c16pol = fread(fid, 'float');
fclose(fid);

fid = fopen('polc8.bin');
c8pol = fread(fid, 'float');
fclose(fid);

fid = fopen('polc4.bin');
c4pol = fread(fid, 'float');
fclose(fid);
